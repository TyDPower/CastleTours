@inject ILocalStorageService LocalStorage
@inject IToastService ToastService
@inject ICartService CartService
@inject ITicketOrderService TicketOrderService
@inject StoreConfig StoreConfig

<div class="modal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">@SelectedTour.Name</h5>
        <button type="button" class="btn-close" @onclick="OnClose"></button>
      </div>
      <div class="modal-body">
        <div>
            <h5>@SelectedTour.Name</h5>
            <h6><span class="oi oi-british-pound"></span> @SelectedTour.GetTicketPriceFormatted()</h6>
        </div>
        <br/>
        @if (SelectedTour.Addons.Count() > 0)
        {
            <div>
                <h5>Tour Extras</h5>
                @foreach (var i in SelectedTour.Addons)
                {
                    <input type="checkbox" id="@i.Id" @onclick="e => HandleAddonsCheckBox(i)">
                    <label for="@i.Id"> @i.Name $@i.GetFormattedPrice()pp </label><br />
                }
            </div>
            <br/>
        }
        <div>
            <label>Ticket QTY</label> &nbsp;
            <select id="ticketQty" @onchange="e => HandleTicketQtyUpdate(e)">
                @for (var i=1; i<=StoreConfig.MaxTicketQty; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>
        <div>
            <hr />
            <h5>Ticket total: <span class="oi oi-british-pound"></span> @HandleTicketCost()</h5>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" @onclick="OnClose">
            <i class="fas fa-times"></i>
        </button>
        <button type="button" class="btn btn-primary" @onclick="AddTicketToCart">
            <i class="fas fa-cart-arrow-down"></i> Add to cart
        </button>
      </div>
    </div>
  </div>
</div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public Tour SelectedTour { get; set; }

    protected List<Addon> SelectedAddons = new List<Addon>();
    protected string customerName;
    protected string castleName;
    protected string tourName;
    protected string location;
    protected decimal ticketCost = 0.00m;
    protected int numberTickets = 1;

    protected override void OnInitialized()
    {
        customerName = null;
        castleName = SelectedTour.Castle.Name;
        tourName = SelectedTour.Name;
        location = SelectedTour.Castle.Location.GetFormattedLocation();
    }

    protected void HandleAddonsCheckBox(Addon addon)
    {
        var item = SelectedAddons.Find(i => i.Id == addon.Id);

        if (item != null) SelectedAddons.Remove(item);
        else SelectedAddons.Add(addon);
    }

    protected void HandleTicketQtyUpdate(ChangeEventArgs e)
    {
        int ticketQty = Convert.ToInt32(e.Value);
        TicketOrderService.SetTicketQty(ticketQty);
    }

    protected string HandleTicketCost()
    {
        //decimal addonsTotal = 0.00m;
        //decimal tourCost = SelectedTour.GetTicketPrice();
        //int ticketQty = numberTickets;

        //foreach (var i in SelectedAddons) addonsTotal += i.Price;

        //ticketCost = (tourCost + addonsTotal) * ticketQty;

        //return ticketCost.ToString("0.00");

        TicketOrderService.SetTicketOrderTotal(SelectedTour.Price, SelectedAddons);
        return TicketOrderService.GetTicketOrderTotalFormatted();
    }

    protected async Task AddTicketToCart()
    {

        TicketOrderService.CreateTicketOrder(/*numberTickets, */ticketCost, tourName, castleName,
            location, SelectedAddons);

        await CartService.AddToCart(TicketOrderService.GetTicketOrder());
        await TicketOrderService.ClearTicketOrder();

        OnClose.InvokeAsync();
    }
}
